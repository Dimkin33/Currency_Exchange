import os
import sqlite3

import pytest
from db_initializer import init_db
from dotenv import load_dotenv
from errors import CurrencyAlreadyExistsError
from model import CurrencyModel

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()


@pytest.fixture()
def model():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω-–º–µ–º–æ—Ä–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    db_path = os.getenv('TEST_DB_PATH', ':memory:')  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –∏–∑ .env
    conn = sqlite3.connect(db_path, uri=True)  # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    init_db(conn)  # üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã —á–µ—Ä–µ–∑ db_initializer
    yield CurrencyModel(conn)
    conn.close()


@pytest.mark.parametrize(
    'code, name, sign',
    [
        ('USD', 'Dollar', '$'),
        ('EUR', 'Euro', '‚Ç¨'),
        ('JPY', 'Yen', '¬•'),
    ],
)
def test_add_currency(model, code, name, sign):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç"""
    result = model.add_currency(code, name, sign)
    assert result['code'] == code
    assert result['name'] == name
    assert result['sign'] == sign


def test_add_duplicate_currency(model):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã —Å —Ç–µ–º –∂–µ –∫–æ–¥–æ–º"""
    code, name, sign = 'USD', 'Dollar', '$'
    model.add_currency(code, name, sign)

    with pytest.raises(CurrencyAlreadyExistsError):
        model.add_currency(code, 'US Dollar', '$$')
