import sqlite3

import pytest
from db_initializer import init_db
from errors import CurrencyAlreadyExistsError
from model import CurrencyModel


@pytest.fixture()
def model():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω-–º–µ–º–æ—Ä–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    conn = sqlite3.connect(":memory:")
    init_db(conn)  # üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã —á–µ—Ä–µ–∑ —Ç–≤–æ–π db_initializer
    yield CurrencyModel(conn)
    conn.close()


@pytest.mark.parametrize("code, name, sign", [
    ("USD", "Dollar", "$"),
    ("EUR", "Euro", "‚Ç¨"),
    ("JPY", "Yen", "¬•"),
])
def test_add_currency(model, code, name, sign):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç"""
    result = model.add_currency(code, name, sign)
    assert result['code'] == code
    assert result['name'] == name
    assert result['sign'] == sign


def test_add_duplicate_currency(model):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã —Å —Ç–µ–º –∂–µ –∫–æ–¥–æ–º"""
    code, name, sign = "USD", "Dollar", "$"
    model.add_currency(code, name, sign)

    with pytest.raises(CurrencyAlreadyExistsError):
        model.add_currency(code, "US Dollar", "$$")
